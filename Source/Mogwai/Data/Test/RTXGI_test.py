from falcor import *

def render_graph_RTXGI():
    g = RenderGraph('RTXGI')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('BlendPass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('ShadowDepthPass.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('myRenderLibrary.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SSR.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RSMBuffer.dll')
    loadRenderPassLibrary('RSMIndirectPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SSDO.dll')
    loadRenderPassLibrary('WireframePass.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('VisibilityPass.dll')
    ToneMappingPass = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMappingPass, 'ToneMappingPass')
    RTXGIPass = createPass('RTXGIPass', {'enablePass': True, 'useVBuffer': False})
    g.addPass(RTXGIPass, 'RTXGIPass')
    GBuffer = createPass('GBufferRaster', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack})
    g.addPass(GBuffer, 'GBuffer')
    CSM = createPass('CSM', {'mapSize': uint2(2048,2048), 'visibilityBufferSize': uint2(0,0), 'cascadeCount': 1, 'visibilityMapBitsPerChannel': 32, 'kSdsmReadbackLatency': 1, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(CSM, 'CSM')
    SkyBox = createPass('SkyBox', {'texName': WindowsPath('.'), 'loadAsSrgb': True, 'filter': SamplerFilter.Linear})
    g.addPass(SkyBox, 'SkyBox')
    ForwardLightingPass = createPass('ForwardLightingPass', {'sampleCount': 1, 'enableSuperSampling': False})
    g.addPass(ForwardLightingPass, 'ForwardLightingPass')
    BlendPass = createPass('BlendPass')
    g.addPass(BlendPass, 'BlendPass')
    g.addEdge('GBuffer.posW', 'RTXGIPass.posW')
    g.addEdge('GBuffer.normW', 'RTXGIPass.normalW')
    g.addEdge('GBuffer.tangentW', 'RTXGIPass.tangentW')
    g.addEdge('GBuffer.faceNormalW', 'RTXGIPass.faceNormalW')
    g.addEdge('GBuffer.texC', 'RTXGIPass.texC')
    g.addEdge('GBuffer.texGrads', 'RTXGIPass.texGrads')
    g.addEdge('GBuffer.mtlData', 'RTXGIPass.mtlData')
    g.addEdge('GBuffer.depth', 'RTXGIPass.depth')
    g.addEdge('RTXGIPass.output', 'ToneMappingPass.src')
    g.addEdge('GBuffer.depth', 'SkyBox.depth')
    g.addEdge('GBuffer.depth', 'CSM.depth')
    g.addEdge('CSM.visibility', 'ForwardLightingPass.visibilityBuffer')
    g.addEdge('SkyBox.depth', 'ForwardLightingPass.depth')
    g.addEdge('SkyBox.target', 'ForwardLightingPass.color')
    g.addEdge('ToneMappingPass.dst', 'BlendPass.texSrc1')
    g.addEdge('ForwardLightingPass.color', 'BlendPass.texSrc2')
    g.markOutput('BlendPass.texDst')
    return g

RTXGI = render_graph_RTXGI()
try: m.addGraph(RTXGI)
except NameError: None
